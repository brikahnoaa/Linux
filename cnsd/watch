#!/usr/bin/perl
#    The initial 'interpreter' line will have to change to match the
#    operating system that this script is running under.
#
#
# This script monitors the size of a log file.   ($logfile)
#
# This version of the WATCH script was last edited on Apr 21st, 2020.
#
#
# **** 
# **** YOU MUST UNCOMMENT THE "$os = 'CUSTOM'" LINE TO RUN THIS ON THE
# **** TGRID MACHINES, AS THEY ARE CONFIGURED DIFFERENTLY.  YOU MUST ALSO
# **** HOST THIS ON THE MACHINE WHERE THEY SHARE /USR/LOCAL, WHICH IS 
# **** CURRENTLY TGRID23.
# ****
#


#
# These are local configuration variables that can be edited by the user.
#
#    $email_local    Space-separated email addresses that should receive the
#                         email notifications generated by this program.  Edit
#                         this if there are people who don't receive all Admin
#                         email for a particular machine's operating system,
#                         but who should receive it for this machine.
#                         At signs (@) must be escaped with backslashes. (\@)
#
#    $common_limit   The number of COMMON-class logfile messages that
#                         warrant sending out email even when there is nothing
#                         else of importance to report.
#
#    $short_stamp    There are two types of timestamps used on our systems.
#                         "short" looks like "Mar 24 06:18:48 HOST".
#                    "long" looks like "2020-03-24T14:00:01.503443-07:00 HOST"
#                         Most are "short", but this must be set correctly in
#                         order to parse /var/log/messages accurately.
#                         1 = short, 0 = long
#

#
# DEBUG: These are test lines for debugging and should be commented out later.
#

# use warnings;   # DEBUG


$email_local = "";

$common_limit = 30;

$short_stamp = "1";

#
# Some general configuration variables are defined here.  They should not be
# edited by the user, except in the "CUSTOM" section.  These are determined
# by the operating system the script is running under.
#
#    $os             The operating system run by this machine, which is
#                         normally returned by the 'uname -s' command.
#    $hostname       A command that returns the name of this machine.  It
#                         should return the short name (hilo), not the fully
#                         qualified name (hilo.pmel.noaa.gov).  It is in
#                         single reversed quotes, so the command will autorun.
#    $logfile        Full path to the file this script will monitor.
#    $history        Full path to the dbm files that are used to store history
#                         information about ($logfile), but without the
#                         .pag/.dir suffixes.
#    $tmpfile        Full path to a temporary filename in a directory that
#                         must be readable and writable by this script, but
#                         not writable by users.  This is a hack to get around
#                         a bug in 'head | tail'.
#    $mail_cmd       The full path to mailx, along with the Subject qualifier.
#    $email_os       Space-separated email addresses that should receive the
#                         email notifications generated by this program, if
#                         it is running under a particular operating system.
#                         At signs (@) must be escaped with backslashes. (\@)
#

#
# If this is being run on a machine that needs customized definitions for
# the variables, comment out the 'uname' definition and uncomment the other
# one.  Then edit the entries in the "elsif ($os eq "CUSTOM")" portion of the
# IF statement accordingly, as they won't be correct the way they stand.
#

chop($os = `/bin/uname -s`);

# $os = "CUSTOM";   # This is the line you uncomment for TGRID machines.

# $os = "TESTING";  # For debugging changes to the script.


if ($os eq "Linux") {                           # Linux, hopefully Red Hat
    $hostname = `/bin/hostname -s`; chop($hostname);
    $logfile  = "/var/log/messages";
    $history  = "/usr/local/scripts/watchdbm";
    $tmpfile  = "/usr/local/scripts/tmp.watch";
    $mail_cmd = "/bin/mail -s";
    $email_os = "oar.pmel.cnsd.redhat_admin\@noaa.gov";
} elsif ($os eq "CUSTOM") {                               # Local customization
    $hostname = `/bin/hostname -s`; chop($hostname);
    $logfile  = "/var/log/messages";
    $history  = "/opt/local/scripts/watchdbm";
    $tmpfile  = "/opt/local/scripts/tmp.watch";
    $mail_cmd = "/bin/mail -s";
    $email_os = "oar.pmel.cnsd.redhat_admin\@noaa.gov";
} elsif ($os = "TESTING") {
    $hostname = `/bin/hostname -s`; chop($hostname);
    $logfile  = "/home/newiidx/deloura/watch/testing/messages";
    $history  = "/home/newiidx/deloura/watch/testing/watchdbm";
    $tmpfile  = "/home/newiidx/deloura/watch/testing/tmp.watch";
    $mail_cmd = "/bin/mail -s";
    $email_os = "oar.pmel.cnsd.redhat_admin\@noaa.gov";
} else {
    die "WATCH script failure:  operating system unrecognized ($os)\n";
}

#
# Open the ($history) DBM file temporarily, to read in the old length of
# ($logfile).  Make a new DBM file if it doesn't exist.
#
# If this script is called with the 'reset' parameter, then all it should do
# is erase the information in the DBM.
#

unless (dbmopen(%db,$history,undef)) {    # Unless the DBM can be opened,
    if (dbmopen(%db,$history,0644)) {     # ... try to create a new one,
	$oldlength = 0;                   # ... and assume $oldlength was 0.
    } else {
	die "Could not open/create DBM.\n";
    }
} else {                                  # If the DBM already existed,
    $oldlength = $db{"length"};           # ... read $oldlength from it.
}

if ($ARGV[0] eq "reset") {                # If running in "reset" mode,
    %db = ();                             # ... just clear the DBM.
    $db{"length"} = 0;                    # Probably redundant, but CYA.
}

dbmclose(%db) || print "Could not close DBM after reading length.\n";

if ($ARGV[0] eq "reset") {                # If running in "reset" mode,
    exit;                                 # ... nothing else is needed.
}


#
# Determine the new length of ($logfile), in lines.  Grab a temporary
# copy ($tmpfile) of the file first, to make sure it doesn't change between
# now and the time that we read lines from it.  ($tmpfile) would not be
# necessary, but there is a "head | tail" bug in some operating systems.
#

unless (-e $logfile) { die "The logfile ($logfile) does not exist!\n"; }

system("cp -f $logfile $tmpfile");         # Make a temp copy of $logfile.

$tmp = `wc -l $tmpfile`;                   # Get length of file by stripping
$tmp =~ s/^\s+//;                          # ... the leading space and the
($newlength,$junk) = split(/\s+/,$tmp,2);  # ... trailing filename from wc -l.


#
# Compare the old file length ($oldlength) to the new one ($newlength), to
# see if the number of lines in ($logfile) has changed.
#
# If the number of lines in the file hasn't changed, we're done.
#

$diff = $newlength - $oldlength;           # $diff = number of lines added

if ($diff == 0) {                          # If there are no new lines,
    system("\\rm -f $tmpfile");            # ... then delete $tmpfile,
    exit;                                  # ... and exit this script.
}

#
# If the log file has increased by a thousand lines or more, then something
# pretty serious is going on.  Mail needs to be sent, but if the message is too
# long, the mail itself may get rejected by our mail server and never reach the
# people who need to see it.  In this case, simply send the last 1000
# lines of the file, without any processing.  Then send a normal message,
# by falling through to the regular code.
#

if ($diff > 999) {
    open(MAIL,"| $mail_cmd \"\*\*\*HIGH ERRORS\*\*\*: \u$hostname Watch: $logfile\" $email_os $email_local") || die "Could not send warning message about high error count.\n";
    chop($sample = `tail -1000 $tmpfile`);
    print MAIL <<"END_OF_MESSAGE";
===============================================================================
WARNING!  There are at least ONE THOUSAND new messages in $logfile.
Old Count:  $oldlength lines
New Count:  $newlength lines ($diff)

Perhaps you should take a look at things.  Here are the last thousand lines
from the current version of the file.  A standard message will follow this one,
if it is not too large to send.

These lines have not been filtered.

-=-=-=-
$sample
-=-=-=-

===============================================================================
--- End Of Message ---
END_OF_MESSAGE

    close(MAIL) || print "Could not close pipe to mail program!\n";
# Fall through to the regular code.
}

#
# If the new file ($logfile) is smaller than it used to be, then something
# decidedly fishy is going on.  Logfiles do not normally shrink unless someone
# edits or rotates them.  If ($logfile) is being rotated, 'watch reset' needs
# to be called after each rotation, to inform WATCH of the change.  If the
# file has been edited, it's probably worth telling someone.
#
# So, if the file has gotten smaller, send a warning message to the usual
# people at $email_os and $email_local.
#

if ($diff < 0) {                           # New logfile smaller = BAD.
    open(MAIL,"| $mail_cmd \"ALERT: \u$hostname Watch: $logfile\" $email_os $email_local") || die "Could not send warning email about $logfile shrinkage.\n";
    chop($sample = `tail -5 $tmpfile`);
    print MAIL <<"END_OF_MESSAGE";
===============================================================================
How odd.  The number of lines in $logfile has decreased.
Old Count:  $oldlength lines
New Count:  $newlength lines ($diff)

Perhaps you should take a look at things.  Here are the last five lines from
the current version of the file.

-=-=-=-
$sample
-=-=-=-

The $history DBM will be reset to reflect this,
and the contents of the new log file will be processed.  You should receive
another email message in a moment.

===============================================================================
--- End Of Message ---
END_OF_MESSAGE

    close(MAIL) || print "Could not close pipe to mail program!\n";

    dbmopen(%db,$history,undef) || die "Could not open DBM to clear it.\n";
    %db = ();                              # Clear the DBM.
    $db{"length"} = 0;                     # All lines will be 'new' next time.
    dbmclose(%db) || print "Could not close DBM after clearing it.\n";

    $oldlength = 0;                        # Pretend the old log was empty,
    $diff = $newlength;                    # ... so that every line is new.
} # This code intentionally falls through into the next section.

#
# If the new ($logfile) is larger, or it inexplicably shrank, we need to
# process it... and possibly send email to ($email_os) and ($email_local).
# Processing begins here.
#
# The general procedure involves classifying each new line of ($tmpfile)
# as one of the following types:
# 
#    USELESS:      Line reports a known event of no importance.
#    COMMON:       Line reports a common event that should be counted.
#    INTERESTING:  Line reports an unusual event must be reported.
#    ABNORMAL:     Line does not match proper logfile format.
#
# Email is always sent out if there are any ABNORMAL or INTERESTING messages.
# Otherwise, email is only sent if there are at least ($common_limit) COMMON
# messages.  USELESS messages are always ignored, and never reported.
#

$send_mail = 0;   # 0 = FALSE, 1 = TRUE    # Is there a reason to send email?

$common_count = 0;                         # How many new COMMON messages?

%newmsgs = ();                             # To count individual COMMON msgs.


#
# Some common patterns that might be used while processing ($tmpfile).
#

$ip     = '\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}'; # IP addresses: ###.###.###.###
$pid    = '\d{1,7}';                            # PIDs are 1-7 digits.
$ftpd   = 'ftpd\[\d{1,5}\]:';                   # Used in FTPD error messages.


#
# Define the correct timestamp format to match based on whether $short_stamp
# is TRUE (1) or FALSE (0).  
#
# TRUE:
# Mar 24 06:18:48 puffin
# m/^([A-Z][a-z][a-z]\s+\d{1,2} \d\d:\d\d:\d\d) $hostname (.*)$/
#
# FALSE:
# 2020-03-24T14:00:01.503443-07:00 arizona-sync
# m/^(\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}\.\d{6}-\d{2}:\d{2}) $hostname (.*)$/
# 

if ($short_stamp) {   # ($short_stamp = TRUE)
    $timestamp = qr/[A-Z][a-z][a-z]\s+\d{1,2} \d\d:\d\d:\d\d/;
#    print "Using short timestamp.\n"; # DEBUG line
} else {              # ($short_stamp = FALSE)
    $timestamp = qr/\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}\.\d{6}-\d{2}:\d{2}/;
#    print "Using long timestamp.\n";  # DEBUG line
}

#
# Open ($tmpfile) via TAIL, so we can read the new lines from it.
#

open(TMPFILE,"tail -$diff $tmpfile |") || die "Could not open TAIL pipe from $tmpfile.\n";

#
# Now process each new line.
#

foreach $line (<TMPFILE>) {                #  (vv  includes the CR  vv)
    $line =~ s/\s*$//;                     # Strip off trailing whitespace.

#
# Check for ABNORMAL messages, which do not fit the correct pattern for this
# log file.  Unless the lines match the correct pattern, they are ABNORMAL.
# The pattern used here is "$timestamp $hostname (rest_of_message)".
# However, there is an optional (digit)(capital letter): immediately before
# the hostname on IRIX systems, so that is included as well.
#  -- Note:  I removed the (\d[A-Z]:)? part that used to be right before
# $hostname on Apr 6th, 2020 but left the comment about it for now.

# This is the old line, temporarily commented out to test the generic line.
#   unless ($line =~ m/^([A-Z][a-z][a-z]\s+\d{1,2} \d\d:\d\d:\d\d) $hostname (.*)$/) {
    unless ($line =~ m/^($timestamp) $hostname (.*)$/) {
	unless ($send_mail) {              # This probably should be a sub.
	    $send_mail = 1;
	    open(MAIL,"| $mail_cmd \"\u$hostname Watch: $logfile\" $email_os $email_local") || die "Could not create email about $logfile changes.\n";
	    print MAIL "Interesting new messages:\n";
	    print MAIL "-------------------------\n";
        }
        print MAIL "------------> Weird line (Bad Hostname or Time Stamp?) in $logfile:\n";
	print MAIL "\t$line\n";
	next;
    }

#
# The pattern match in the first 'unless' statement has placed the interesting
# part of the message into $2, so let's save that under a better name before
# doing any further matches that would overwrite this temporary variable.
#

    $msg = $2;

#
# These patterns check for COMMON messages.  Additional checks can be added
# here, provided that code to save them is added later in the script.
#

#
# The question mark in this next pattern means "there's either a single S here,
# or none at all."  It doesn't actually match the ASCII character '?'.
# A bunch of these lines are commented out as an experiment to see if they are
# still relevant.  If they get removed permanently, I should remove the
# corresponding lines later in the code.
#
    if ($msg =~ m/^last message repeated .* times?$/) {
	$newmsgs{"repeat_N"}++;
	$common_count++;
#    } elsif ($msg =~ m/^$ftpd ACCESS DENIED \(deny command\) TO ($ip) \[\1\]$/) {
#        $newmsgs{"ftpdenied/$1"}++;
#	$common_count++;
#    } elsif ($msg =~ m/^$ftpd fcntl F_SETOWN: Connection reset by peer$/) {
#        $newmsgs{"fcntl"}++;
#	$common_count++;
#    } elsif ($msg =~ m/^$ftpd FTP LOGIN REFUSED \(access denied\) FROM ($ip) \[\1\], (.*)$/) {
#        $newmsgs{"ftpdenied/$1/$2"}++;
#	$common_count++;
#    } elsif ($msg =~ m/^$ftpd getpeername \(in.ftpd\): Transport endpoint is not connected$/) {
#        $newmsgs{"getpeername"}++;
#	$common_count++;
#    } elsif ($msg =~ m/^$ftpd setsockopt \(IP_TOS\): Invalid argument$/) {
#        $newmsgs{"setsockopt_IP"}++;
#	$common_count++;
#    } elsif ($msg =~ m/^$ftpd setsockopt \(SO_OOBINLINE\): Invalid argument$/){
#        $newmsgs{"setsockopt_SO"}++;
#	$common_count++;
#    } elsif ($msg =~ m/^$ftpd sleeping: fcntl lock of pid file failed: Resource temporarily unavailable$/) {
#        $newmsgs{"sleeping"}++;
#	$common_count++;
#    } elsif ($msg =~ m/^$ftpd (.*) of (.*) \[$ip\] ((deleted)|(tried to remove))( directory)? .*$/) {
#	$newmsgs{"ftp delete/$1/$2"}++;
#	$common_count++;
#    } elsif ($msg =~ m/^$ftpd (.*) of (.*) \[$ip\] ((created)|(tried to create))( directory)? .*$/) {
#	$newmsgs{"ftp create/$1/$2"}++;
#	$common_count++;
#    } elsif ($msg =~ m/^$ftpd (.*) of (.*) \[$ip\] renamed .*$/) {
#	$newmsgs{"ftp rename/$1/$2"}++;
#	$common_count++;
#    } elsif ($msg =~ m/^utmp_update\[$pid\]: Wrong number of arguments or invalid user$/) {
#	$newmsgs{"utmp"}++;
#	$common_count++;
    } elsif ($msg =~ m/^xntpd\[$pid\]: offset -?\d+\.\d+ freq -?\d+\.\d+ poll \d+$/) {
	$newmsgs{"xntpd"}++;
	$common_count++;
    } elsif ($msg =~ m/^kernel: .*: segfault at .* rip .* error .*$/) {
	$newmsgs{"segfault"}++;
	$common_count++;
    } elsif ($msg =~ m/^kernel: .*\[$pid\]: segfault at .*$/) {
	$newmsgs{"segfault"}++;
	$common_count++;
    } elsif ($msg =~ m/yum\[$pid\]: Updated: .*$/) {
	$newmsgs{"yumupdate"}++;
	$common_count++;
# These next two are using $pid the second time just because UIDs and GIDs are
# going to be from 1-5 digits.  They're not actually PIDs.
    } elsif ($msg =~ m/rpc\.idmapd\[$pid\]: nss_getpwnam: name '$pid' does not map into domain.*$/) {
	$newmsgs{"rpcidmapd"}++;
	$common_count++;
    } elsif ($msg =~ m/rpc\.idmapd\[$pid\]: nss_name_to_gid: name '$pid' does not map into domain.*$/) {
	$newmsgs{"rpcidmapd"}++;
	$common_count++;
    } elsif ($msg =~ m/nfsidmap\[$pid\]: nss_getpwnam: name '.*' does not map into domain.*$/) {
	$newmsgs{"rpcidmapd"}++;
	$common_count++;
    } elsif ($msg =~ m/nfsidmap\[$pid\]: nss_getpwnam: name '.*' not found in domain.*$/) {
	$newmsgs{"nfsidmap"}++;
	$common_count++;
    } elsif ($msg =~ m/nfsidmap\[$pid\]: nss_name_to_gid: name '.*' does not map into domain.*$/) {
	$newmsgs{"nfsidmap"}++;
	$common_count++;
    } elsif ($msg =~ m/nfsidmap\[$pid\]: nss_name_to_gid: name '.*' not found in domain.*$/) {
	$newmsgs{"nfsidmap"}++;
	$common_count++;

#
# Statements to check for USELESS messages can be added here, between the
# COMMON checks and the INTERESTING default.  USELESS messages should just
# be skipped via the "next" command.
#
    } elsif ($msg =~ m/^anacron\[$pid\]: Updated timestamp for job .*$/) {
	next;
    } elsif ($msg =~ m/^auditd\[$pid\]: Audit daemon rotating log files$/) {
	next;
    } elsif ($msg =~ m/^(crond|ftp|gdm|kde|login|remote|sshd)\(pam_unix\)\[$pid\]: session (clos|open)ed for user .*$/) {
        next;
    } elsif ($msg =~ m/^gconfd \(.*-$pid\): .*$/) {
        next;
    } elsif ($msg =~ m/^kernel: .*\[$pid\]: segfault at .*$/) {
        next;
    } elsif ($msg =~ m/^mountd\[$pid\]: authenticated (mount|mountall|unmount|unmountall) request from 161\.55\..* for .*$/) {
        next;
    } elsif ($msg =~ m/^mountd\[$pid\]: authenticated (mount|mountall|unmount|unmountall) request from .*\.noaa\.gov.* for .*$/) {
        next;
    } elsif ($msg =~ m/^(x?)ntpd\[$pid\]: time reset .*$/) {
        next;
    } elsif ($msg =~ m/^(x?)ntpd\[$pid\]: synchronized to $ip, stratum .*$/) {
        next;
    } elsif ($msg =~ m/^(x?)ntpd\[$pid\]: kernel time discipline status change .*$/) {
        next;
    } elsif ($msg =~ m/^rpc.mountd: authenticated (mount|mountall|unmount|unmountall) request from .*\.noaa\.gov.* for .*$/) {
        next;
    } elsif ($msg =~ m/^rpc.mountd: authenticated (mount|mountall|unmount|unmountall) request from 161\.55\..* for .*$/) {
        next;
    } elsif ($msg =~ m/^rpc.mountd\[$pid\]: authenticated (mount|mountall|unmount|unmountall) request from .*\.noaa\.gov.* for .*$/) {
        next;
    } elsif ($msg =~ m/^rpc.mountd\[$pid\]: authenticated (mount|mountall|unmount|unmountall) request from 161\.55\..* for .*$/) {
        next;
    } elsif ($msg =~ m/^rsyslogd: \[origin software\=\"rsyslogd\" swVersion\=\".*\" x-pid\=\"$pid\" x-info\=\"http:\/\/www\.rsyslog\.com\"\] rsyslogd was HUPed.*$/) {  # This might need a better pattern to match.
	next;
    } elsif ($msg =~ m/^pam_tally\[$pid\]: Error opening \/var\/log\/faillog for update.*$/) {
        next;
    } elsif ($msg =~ m/^rhsmd: This system is registered to RHN Classic.*$/) {
        next;
    } elsif ($msg =~ m/^smartd\[$pid\]: Device: \/dev\/.*, not capable of SMART self-check$/) {
	next;
    } elsif ($msg =~ m/^syslogd .*: restart\.$/) {
        next;
#
# This line matches single digit plus or minus temperature changes that result
# in something from 20-39 Celsius as a final total.
#
    } elsif ($msg =~ m/^smartd\[$pid\]: Device: .*, Temperature changed -?. Celsius to [23]. Celsius since last .*$/) {
        next;
#
# Archttp64 messages that aren't helpful.  (Not all of them.)
#
    } elsif ($msg =~ m/^archttp64: \[WARNING\]: IP\[0\]: 0\.0\.0\.0.*$/) {
	next;
    } elsif ($msg =~ m/^archttp64: \[WARNING\]: IP\[1\]: 127\.0\.0\.1.*$/) {
	next;
    } elsif ($msg =~ m/^archttp64: \[WARNING\]: IP\[2\]: 161\.55\.168\.154.*$/) {
	next;  # nctrd
    } elsif ($msg =~ m/^archttp64: \[WARNING\]: IP\[2\]: 161\.55\.168\.45.*$/) {
	next;  # tweb5
#
# Common battery messages that aren't errors.
# The unescaped periods here match any single character, as these messages
# vary slightly from machine to machine.
# 
    } elsif ($msg =~ m/^kernel: 3w-sas: scsi.: AEN: INFO: \(0x04:0x00..\): Battery temperature is normal:\..*$/) {
	next;
    } elsif ($msg =~ m/^kernel: 3w-sas: scsi.: AEN: INFO: \(0x04:0x00..\): Battery charging started:\..*$/) {
	next;
    } elsif ($msg =~ m/^kernel: 3w-sas: scsi.: AEN: INFO: \(0x04:0x00..\): Battery charging completed:\..*$/) {
	next;

#
#  Some RHEL7-specific messages of insignificance.
#
    } elsif ($msg =~ m/^systemd: Start(ing|ed) update of the root trust anchor.*$/) {
	next;
    } elsif ($msg =~ m/^systemd: Start(ing|ed) Cleanup of Temporary Directories.*$/) {
	next;
#  These two don't matter, but the other ones near them do.
    } elsif ($msg =~ m/^Server_Administrator:.*The Patrol Read has started.*$/) {
	next;
    } elsif ($msg =~ m/^Server_Administrator:.*The Patrol Read has stopped.*$/) {
	next;

#
# Filters added due to specific machines.
#

#
# Argoserver
# I think these can be removed now, because I'm filtering them on Argoserver.
#
#    } elsif ($msg =~ m/^rudicsd\[$pid\]: Rudics connection (initiated|terminated)\[.*$/) {
#        next;
#    } elsif ($msg =~ m/^rudicsd\[$pid\]: \$WARNING\$ - terminating \(orphan\?\) iridium connection..*$/) {
#	next;
#    } elsif ($msg =~ m/^xinetd\[$pid\]: EXIT: rudics signal=.*$/) {
#        next;
#    } elsif ($msg =~ m/^xinetd\[$pid\]: START: rudics pid=.*$/) {
#        next;

#
# Eclipse
#
    } elsif ($msg =~ m/^vmpsd: ALLOW:.*$/) {
	next;
#
# Erwin
#
    } elsif ($msg =~ m/^nmbd\[$pid\]: .*$/) {
	next;
#
# Heceta
# 
    } elsif ($msg =~ m/^vsftpd\[$pid\]: warning: \/etc\/hosts\.deny, line .*: host name\/address mismatch: 66\.162\.133\.26 \!= spaceneedle\.com.*$/) {
        next;
#
# Hungdao
#
    } elsif ($msg =~ m/^ntpd\[$pid\]: frequency error .* PPM exceeds tolerance 500 PPM.*$/) {
        next;
#
# Ketch
#
    } elsif ($msg =~ m/^wall\[$pid\]: wall: user mysql broadcasted .* lines \(.* chars\)$/) {
        next;
#
# Korolev
# 
    } elsif ($msg =~ m/^smbd\[$pid\]: .*$/) {
        next;
#
# Radius
#    (Mike Knezevich said it was OK to filter these messages.)
#
    } elsif ($msg =~ m/^vmpsd: ALLOW: .*$/) {
	next;
#
# Prism
#
    } elsif ($msg =~ m/^cups: cupsd (shutdown|startup) succeeded.*$/) {
       next;
#
# Tgrid systems
#
    } elsif ($msg =~ m/^automount\[$pid\]: key .* not found in map source.*$/) {
        next;
#
# Weir
#
    } elsif ($msg =~ m/^named\-9\.7: named reload succeeded$/) {
	next;
#
# Veritas software (Backup Exec)
# According to https://www.veritas.com/content/support/en_US/article.100010263
# these messages can be disregarded.
#
    } elsif ($msg =~ m/^SYMBDSNAP_SDK\[$pid\]: Driver is not loaded\. Loading symbdsnap.*$/) {
	next;
    } elsif ($msg =~ m/^SYMBDSNAP_SDK\[$pid\]: Missing symbdsnap driver.*$/) {
	next;
    } elsif ($msg =~ m/^SYMBDSNAP_SDK\[$pid\]: Failed to open device: \/dev\/symbdsnapctl.*$/) {
	next;
    } elsif ($msg =~ m/^dbus: \[system\] Reloaded configuration.*$/) {
	next;

#
# chrony.  Haven't decided if these are really worth seeing constantly.
#
    } elsif ($msg =~ m/^chronyd\[$pid\]: Selected source .*$/) {
	next;

#
# Any message that is not ABNORMAL, COMMON, or USELESS is INTERESTING (by
# definition).
#

    } else {
	unless ($send_mail) {              # This probably should be a sub.
	    $send_mail = 1;
	    open(MAIL,"| $mail_cmd \"\u$hostname Watch: $logfile\" $email_os $email_local") || die "Could not create email about $logfile changes.\n";
	    print MAIL "Interesting new messages:\n";
	    print MAIL "-------------------------\n";
        }
	print MAIL "$line\n";
    }  # Yes, the end of the giant IF/ELSIF statement.

#
# All new messages have now been processed, so close the 'foreach' loop.
# ($tmpfile) can be closed and removed as well.
#

}  # The end of the even larger FOREACH statement.

close(TMPFILE) || print "Could not close $tmpfile after processing.\n";
system("\\rm -f $tmpfile");


#
# The database needs to be updated, so current information will be available
# the next time this script runs.  It will need to be opened again later (just
# to read from it) if we ($send_mail).
#
# There probably ought to be a check here for '%newmsgs = ()', which would
# allow us to just exit without doing anything else, unless ABNORMAL or
# INTERESTING messages have caused us to ($send_mail).
#

dbmopen(%db,$history,undef) || die "Could not open DBM after processing.\n";

$db{"length"} = $newlength;

@keys = keys %newmsgs;

foreach $key (@keys) {
    $db{"$key"} += $newmsgs{"$key"};
}

dbmclose(%db) || print "Could not close DBM after updating it.\n";


#
# At this point, one of three things is true.
# 
# (1)  There were no INTERESTING or ABNORMAL messages, and there are
#      not enough COMMON messages to make it worthwhile to send out email.
#
# (2)  There were no INTERESTING or ABNORMAL messages, but there *are*
#      enough COMMON messages to make it worthwhile to send out email.
#
# (3)  There was at least one INTERESTING or ABNORMAL message.  Not only
#      does email need to be sent out, but the filehandle for doing so is
#      already open (<MAIL>) and we've already written some text to it.
#      The ($send_mail) flag indicates this.
#
# The correct course of action depends on which situation holds.
#

# print "DEBUG:  Current common count is $common_count.\n";

unless ($send_mail) {                          # unless situation (3)
    if ($common_count < $common_limit) {       # if not enough COMMON msgs,
	exit;                                  # ... then exit this script.
    } else {                                   # if enough COMMON msgs, email.
	open(MAIL,"| $mail_cmd \"\u$hostname Watch: $logfile\" $email_os $email_local") || die "Could not create email about $logfile changes.\n";
	print MAIL "No particularly interesting messages were logged.\n";
    }
}


#
# Now the email filehandle (<MAIL>) is guaranteed to be open, either by
# getting opened when we set ($send_mail), or by getting opened because we
# had at least ($common_limit) new COMMON messages.
#

print MAIL "\n\n";                             # Print some header information.
print MAIL "Number of common messages logged:\n";
print MAIL "---------------------------------\n";


#
# Re-open the DBM, and add the information in it to the email message being
# generated, along with the count of new COMMON messages from this run of the
# script.
#
# If new lines are added to the main IF/ELSIF/ELSE statement that checks for
# COMMON messages, then new lines need to be added here in order to print out
# their current totals.
#

dbmopen(%db,$history,undef) || die "Could not open DBM to generate email.\n";


#
# This section prints out the messages that have no variance (IP addresses,
# etc) to them.  Then it removes them from the (%newmsgs) list.  It would
# work better as a subroutine.
#

if ($newmsgs{"repeat_N"} > 0) {
    printf(MAIL "%5d (%5d)  last message repeated N times\n",
	   $newmsgs{"repeat_N"}, $db{"repeat_N"});
    delete $newmsgs{"repeat_N"};
}

if ($newmsgs{"yumupdate"} > 0) {
    printf(MAIL "%5d (%5d)  YUM updated a package\n",
	   $newmsgs{"yumupdate"}, $db{"yumupdate"});
    delete $newmsgs{"yumupdate"};
}

if ($newmsgs{"rpcidmapd"} > 0) {
    printf(MAIL "%5d (%5d)  rpc.idmapd: UID/GID does not map into domain\n",
	   $newmsgs{"rpcidmapd"}, $db{"rpcidmapd"});
    delete $newmsgs{"rpcidmapd"};
}

if ($newmsgs{"nfsidmap"} > 0) {
    printf(MAIL "%5d (%5d)  nfsidmap: name does not map into domain\n",
	   $newmsgs{"nfsidmap"}, $db{"nfsidmap"});
    delete $newmsgs{"nfsidmap"};
}

if ($newmsgs{"getpeername"} > 0) {
    printf(MAIL "%5d (%5d)  getpeername (in.ftpd): Transport endpoint is not connected\n",
	   $newmsgs{"getpeername"}, $db{"getpeername"});
    delete $newmsgs{"getpeername"};
}

if ($newmsgs{"sleeping"} > 0) {
    printf(MAIL "%5d (%5d)  sleeping: fcntl lock of pid file failed\n",
	   $newmsgs{"sleeping"}, $db{"sleeping"});
    delete $newmsgs{"sleeping"};
}

if ($newmsgs{"setsockopt_IP"} > 0) {
    printf(MAIL "%5d (%5d)  setsockopt (IP_TOS): Invalid argument\n",
	   $newmsgs{"setsockopt_IP"}, $db{"setsockopt_IP"});
    delete $newmsgs{"setsockopt_IP"};
}

if ($newmsgs{"setsockopt_SO"} > 0) {
    printf(MAIL "%5d (%5d)  setsockopt (SO_OOBINLINE): Invalid argument\n",
	   $newmsgs{"setsockopt_SO"}, $db{"setsockopt_SO"});
    delete $newmsgs{"setsockopt_SO"};
}

if ($newmsgs{"fcntl"} > 0) {
    printf(MAIL "%5d (%5d)  fcntl F_SETOWN: Connection reset by peer\n",
	   $newmsgs{"fcntl"}, $db{"fcntl"});
    delete $newmsgs{"fcntl"};
}

if ($newmsgs{"xntpd"} > 0) {
    printf(MAIL "%5d (%5d)  xntpd time adjustment\n",
	   $newmsgs{"xntpd"}, $db{"xntpd"});
    delete $newmsgs{"xntpd"};
}

if ($newmsgs{"utmp"} > 0) {
    printf(MAIL "%5d (%5d)  utmp_update: Wrong number of args or invalid user\n",
	   $newmsgs{"utmp"}, $db{"utmp"});
    delete $newmsgs{"utmp"};
}

if ($newmsgs{"segfault"} > 0) {
    printf(MAIL "%5d (%5d)  kernel segfault errors\n",
	   $newmsgs{"segfault"}, $db{"segfault"});
    delete $newmsgs{"segfault"};
}

#
# This section deals with the variable messages.  Each of these has a slash
# in its name.
#
# The current possibilities are:
#
#     update/$1, axfr/$1, noview/$1, deny/$1, ftpdenied/$1,
#     ftpdenied/$1/$2, ftp create/$1/$2, ftp delete/$1/$2, ftp rename/$1/$2,
#     identd/$1/$2
#

@keys = sort(keys %newmsgs);

foreach $key (@keys) {
    $type = $addr = 0;
    ($type,$addr) = split('/',$key,2);
    if ($type eq "ftpdenied") {
	$host = $user = 0;
	($host,$user) = split('/',$addr,2);
	if ($user) {
	    printf(MAIL "%5d (%5d)  FTP LOGIN REFUSED: $user\@$host\n",
		   $newmsgs{"$key"}, $db{"$key"});
	} else {
	    printf(MAIL "%5d (%5d)  ACCESS DENIED: $host\n",
		   $newmsgs{"$key"}, $db{"$key"});
	}
	delete $newmsgs{"$key"};
    } elsif (($type eq "ftp create") || ($type eq "ftp delete") || ($type eq "ftp rename")) {
	$user = $host = 0;
	($user,$host) = split('/',$addr,2);
        printf(MAIL "%5d (%5d)  \U$type\E: $user\@$host\n",
	       $newmsgs{"$key"}, $db{"$key"});
	delete $newmsgs{"$key"};
    } elsif ($type eq "identd") {
	$host = $user = 0;
	($host,$user) = split('/',$addr,2);
	printf(MAIL "%5d (%5d)  identd: $user\@$host\n",
	       $newmsgs{"$key"}, $db{"$key"});
	delete $newmsgs{"$key"};
    } else {
	printf(MAIL "????? (?????) Unfamiliar COMMON message in DBM.\n");
    }
}


#
# All done.  Close the DBM and send off the email message.
#

dbmclose(%db) || print MAIL "Could not close DBM at end of program.\n";

close(MAIL) || print "Could not close email pipe at end of script!.\n";

exit;
